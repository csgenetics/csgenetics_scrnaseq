/*
 * Conda environment configuration
 * Maps each process to its appropriate conda environment YAML file
 */

process {
    // Base utilities - bash, coreutils, gzip
    withName: 'save_resolved_configuration' {
        conda = "${projectDir}/conda_envs/base.yml"
    }
    withName: 'merge_lanes' {
        conda = "${projectDir}/conda_envs/base.yml"
    }

    // AWS CLI for downloading resources
    withName: 'download_star_index' {
        conda = "${projectDir}/conda_envs/aws_tools.yml"
    }
    withName: 'download_gtf' {
        conda = "${projectDir}/conda_envs/aws_tools.yml"
    }
    withName: 'download_input_csv' {
        conda = "${projectDir}/conda_envs/aws_tools.yml"
    }
    withName: 'download_barcode_list' {
        conda = "${projectDir}/conda_envs/aws_tools.yml"
    }
    withName: 'download_barcode_correction_list' {
        conda = "${projectDir}/conda_envs/aws_tools.yml"
    }
    withName: 'download_public_fastq' {
        conda = "${projectDir}/conda_envs/aws_tools.yml"
    }

    // Python with gtfparse for GTF parsing
    withName: 'features_file' {
        conda = "${projectDir}/conda_envs/gtfparse.yml"
    }

    // CS Genetics QC binary (from cs_genetics conda channel)
    withName: 'qc' {
        conda = "${projectDir}/conda_envs/qc.yml"
    }

    // UMI-tools deduplication (standard umi_tools from bioconda)
    withName: 'dedup' {
        conda = "${projectDir}/conda_envs/umi_tools.yml"
    }

    // Samtools processes
    withName: 'io_count' {
        conda = "${projectDir}/conda_envs/samtools.yml"
    }
    withName: 'create_valid_empty_bam' {
        conda = "${projectDir}/conda_envs/samtools.yml"
    }
    withName: 'sort_index_bam' {
        conda = "${projectDir}/conda_envs/samtools.yml"
    }

    // STAR alignment with samtools
    withName: 'star' {
        conda = "${projectDir}/conda_envs/star_samtools.yml"
    }

    // GTF to BED conversion (Perl script in bin/)
    withName: 'gtf2bed' {
        conda = "${projectDir}/conda_envs/gtf2bed.yml"
    }

    // RSeQC for RNA-seq QC metrics
    withName: 'run_rseqc' {
        conda = "${projectDir}/conda_envs/rseqc.yml"
    }

    // Subread (featureCounts) with samtools
    withName: 'initial_feature_count' {
        conda = "${projectDir}/conda_envs/subread_samtools.yml"
    }
    withName: 'filter_for_UMRs_mismatch' {
        conda = "${projectDir}/conda_envs/subread_samtools.yml"
    }
    withName: 'umr_transcript_assignment' {
        conda = "${projectDir}/conda_envs/subread_samtools.yml"
    }
    withName: 'umr_exon_assignment' {
        conda = "${projectDir}/conda_envs/subread_samtools.yml"
    }
    withName: 'filter_for_multimappers_mismatch' {
        conda = "${projectDir}/conda_envs/subread_samtools.yml"
    }
    withName: 'multimapper_transcript_assignment' {
        conda = "${projectDir}/conda_envs/subread_samtools.yml"
    }
    withName: 'multimapper_exon_assignment' {
        conda = "${projectDir}/conda_envs/subread_samtools.yml"
    }
    withName: 'merge_transcript_exon_umr_bams' {
        conda = "${projectDir}/conda_envs/subread_samtools.yml"
    }
    withName: 'merge_transcript_exon_multimapper_bams' {
        conda = "${projectDir}/conda_envs/subread_samtools.yml"
    }
    withName: 'merge_annotated_UMRs_with_annotated_multimappers' {
        conda = "${projectDir}/conda_envs/subread_samtools.yml"
    }
    withName: 'count_high_conf_annotated_umr_multimap' {
        conda = "${projectDir}/conda_envs/subread_samtools.yml"
    }

    // MultiQC with CS Genetics plugin
    withName: 'single_sample_multiqc' {
        conda = "${projectDir}/conda_envs/multiqc.yml"
    }
    withName: 'multi_sample_multiqc' {
        conda = "${projectDir}/conda_envs/multiqc.yml"
    }

    // Scanpy/Anndata for count matrices and cell calling
    withName: 'count_matrix' {
        conda = "${projectDir}/conda_envs/scanpy_anndata.yml"
    }
    withName: 'cell_caller' {
        conda = "${projectDir}/conda_envs/scanpy_anndata.yml"
    }
    withName: 'filter_count_matrix' {
        conda = "${projectDir}/conda_envs/scanpy_anndata.yml"
    }
    withName: 'categorize_reads' {
        conda = "${projectDir}/conda_envs/scanpy_anndata.yml"
    }
    withName: 'summary_statistics' {
        conda = "${projectDir}/conda_envs/scanpy_anndata.yml"
    }

    // HTML report generation
    withName: 'qc_cascade_plot_single' {
        conda = "${projectDir}/conda_envs/html_build.yml"
    }
    withName: 'qc_cascade_plot_multi' {
        conda = "${projectDir}/conda_envs/html_build.yml"
    }
    withName: 'single_summary_report' {
        conda = "${projectDir}/conda_envs/html_build.yml"
    }
    withName: 'multi_sample_report' {
        conda = "${projectDir}/conda_envs/html_build.yml"
    }
}
