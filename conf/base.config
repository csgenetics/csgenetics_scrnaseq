/*
 * Resource allocation configigurations.
 * Labels can be adjusted in the processes.nf.
 */

process {
  errorStrategy = 'retry'
  maxRetries = 5

  // Process-specific resource requirements
  // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors

  withName: 'download_star_index' {
    cpus = { check_max (1, 'cpus')}
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    scratch = true
  }
  withName: 'download_gtf' {
    cpus = { check_max (1, 'cpus')}
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    scratch = true
  }
  withName: 'download_input_csv' {
    cpus = { check_max (1, 'cpus')}
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    scratch = true
  }
  withname: 'download_barcode_list' {
    cpus = { check_max (1, 'cpus')}
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    scratch = true
  }
  withName: 'download_public_fastq' {
    cpus = { check_max (1, 'cpus')}
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  }
  withName: 'features_file' {
    cpus = { check_max (2, 'cpus')}
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }
  withName: 'merge_lanes' {
    cpus = { check_max (1, 'cpus')}
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  }
  withName: merged_fastp {
    cpus = { check_max (4, 'cpus')}
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
  }
  withName: io_extract {
    cpus = { check_max (2, 'cpus')}
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  }
  withName: io_extract_fastp {
    cpus = { check_max (4, 'cpus')}
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
  }
  withName: trim_extra_polya {
    cpus = { check_max (1, 'cpus')}
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
  }
  withName: post_polyA_fastp {
    cpus = { check_max (4, 'cpus')}
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
  }
  if(params.genome == "mouse_human_mix"){
    withName: star {
      cpus = { check_max (16, 'cpus')}
      memory = { check_max( 60.GB * task.attempt, 'memory' ) }
    }
  }else{
    withName: star {
      cpus = { check_max (16, 'cpus')}
      memory = { check_max( 40.GB * task.attempt, 'memory' ) }
    }
  }
  withName: create_valid_empty_bam {
    cpus = { check_max (1, 'cpus')}
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
  }
  withName: gtf2bed {
    cpus = { check_max (1, 'cpus')}
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
  }
  withName: raw_rseqc {
    cpus = { check_max (8, 'cpus')}
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  }
  withName: annotated_rseqc {
    cpus = { check_max (8, 'cpus')}
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  }
  withName: feature_counts {
    cpus = { check_max (4, 'cpus')}
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  }
  withName: multiqc {
    cpus = { check_max (1, 'cpus')}
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
  }
  withName: sort_index_bam {
    cpus = { check_max (1, 'cpus')}
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
  }
  withName: dedup {
    cpus = { check_max (4, 'cpus')}
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }
  withName: io_count {
    cpus = { check_max (4, 'cpus')}
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
  }
  withName: count_matrix {
    cpus = { check_max (4, 'cpus')}
    memory = { check_max( 24.GB * task.attempt, 'memory' ) }
  }
  withName: cell_caller {
    cpus = { check_max (4, 'cpus')}
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
  }
  withName: filter_count_matrix {
    cpus = { check_max (2, 'cpus')}
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  }
  withName: summary_statistics {
    cpus = { check_max (1, 'cpus')}
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }
  withName: single_summary_report {
    cpus = { check_max (4, 'cpus')}
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  }
  withName: multi_sample_report {
    cpus = { check_max (2, 'cpus')}
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  }
}

